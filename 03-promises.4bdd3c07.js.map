{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SAClCC,EAAO,GAoCX,SAASC,EAAcC,EAAUC,GACjC,IAAMC,EAAgBC,KAAKC,SAAW,GACpC,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GAEjBL,EACNI,EAAI,CAACN,WAAUC,UAEfM,EAAI,CAACP,WAAUC,S,IA1CnBN,EAAOa,iBAAiB,UAExB,SAAsBC,GACpBA,EAAGC,iBACH,IAA8DC,EAAhBF,EAAGG,cAAzCC,SAAYC,EAAKH,EAALV,MAAOc,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OACjC,GAAoB,KAAhBF,EAAMG,OAA+B,KAAfF,EAAKE,OAAiC,KAAjBD,EAAOC,MAEpD,YADAC,EAAAzB,GAAS0B,OAAOC,QAAQ,kCAI1BtB,EAAKG,MAAQa,EAAMG,MACnBnB,EAAKiB,KAAOA,EAAKE,MACjBnB,EAAKkB,OAASA,EAAOC,MAErBtB,EAAO0B,QACPC,YAAW,WACX,IAAK,IAAIC,EAAI,EAAGA,EAAIzB,EAAKkB,OAAQO,GAAK,EACjCxB,EAAcwB,EAAGzB,EAAKG,OACtBuB,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MACjBiB,EAAAzB,GAAS0B,OAAOO,QAAQ,uBAAwCC,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M,IAEvE2B,OAAM,SAAAH,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MACpBiB,EAAAzB,GAAS0B,OAAOC,QAAQ,sBAAqCO,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M,MAGrEH,EAAKG,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector(\".form\")\nlet info = {}\nformEl.addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(ev) {\n  ev.preventDefault();\n  const { elements: { delay, step, amount } } = ev.currentTarget;\n  if (delay.value === \"\" || step.value === \"\" || amount.value === \"\") {\n    Notiflix.Notify.failure(\"Please fill in all the fields!\");\n    return;\n  }\n\n  info.delay = delay.value;\n  info.step = step.value;\n  info.amount = amount.value;\n\n  formEl.reset();\n  setTimeout(() => {\n  for (let i = 0; i < info.amount; i += 1){\n       createPromise(i, info.delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      })\n  }\n }, info.delay)\n\n}\n\n\n\n\n\n\n\nfunction createPromise(position, delay) {\nconst shouldResolve = Math.random() > 0.3;\n  return new Promise((res, rej) => {\n    \n      if (shouldResolve) {\n    res({position, delay})\n  } else {\n    rej({position, delay})\n  }\n  \n  })\n   \n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$info","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","res","rej","addEventListener","ev","preventDefault","_elements","currentTarget","elements","delay1","step","amount","value","$parcel$interopDefault","Notify","failure","reset","setTimeout","i","then","param","success","concat","catch"],"version":3,"file":"03-promises.4bdd3c07.js.map"}