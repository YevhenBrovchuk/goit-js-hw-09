{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SACtC,IAAIC,EAAO,GAuCX,SAASC,EAAcC,EAAUC,GACjC,MAAMC,EAAgBC,KAAKC,SAAW,GACpC,OAAO,IAAIC,SAAQ,CAACC,EAAKC,KACvBC,YAAW,KAELN,EACNI,EAAI,C,SAACN,E,MAAUC,IAEfM,EAAI,C,SAACP,E,MAAUC,GAAO,GAEnBA,EAAM,G,CAhDbN,EAAOc,iBAAiB,UAExB,SAAsBC,GACpBA,EAAGC,iBACH,MAAQC,UAAYX,MAAAY,EAAKC,KAAEA,EAAIC,OAAEA,IAAaL,EAAGM,cACjD,GAAoB,KAAhBH,EAAMI,OAA+B,KAAfH,EAAKG,OAAiC,KAAjBF,EAAOE,MAEpD,YADAC,EAAAzB,GAAS0B,OAAOC,QAAQ,kCAI1BtB,EAAKG,MAAQoB,OAAOR,EAAMI,OAC1BnB,EAAKgB,KAAOO,OAAOP,EAAKG,OACxBnB,EAAKiB,OAASM,OAAON,EAAOE,OAC9BK,QAAQC,WAAWzB,EAAKG,OACtBN,EAAO6B,QAEP,IAAK,IAAIC,EAAI,EAAGA,EAAI3B,EAAKiB,OAAQU,GAAK,EAAE,CACtC,MAAMC,EAAMD,EAAI,EACVE,EAAQ7B,EAAKG,MAAOwB,EAAE3B,EAAKgB,KAC9Bf,EAAc2B,EAAKC,GACnBC,MAAK,EAAC5B,SAAEA,EAAQC,MAAEA,MACjBiB,EAAAzB,GAAS0B,OAAOU,QAAQ,uBAAqB7B,QAAiBC,MAAU,IAEzE6B,OAAM,EAAC9B,SAAEA,EAAQC,MAAEA,MACpBiB,EAAAzB,GAAS0B,OAAOC,QAAQ,sBAAoBpB,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector(\".form\")\nlet info = {}\nformEl.addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(ev) {\n  ev.preventDefault();\n  const { elements: { delay, step, amount } } = ev.currentTarget;\n  if (delay.value === \"\" || step.value === \"\" || amount.value === \"\") {\n    Notiflix.Notify.failure(\"Please fill in all the fields!\");\n    return;\n  }\n\n  info.delay = Number(delay.value);\n  info.step = Number(step.value);\n  info.amount = Number(amount.value);\nconsole.log(typeof info.delay);\n  formEl.reset();\n  \n  for (let i = 0; i < info.amount; i += 1){\n    const pos = i + 1;\n    const current=info.delay+(i*info.step)\n       createPromise(pos, current)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      })\n     \n  }\n \n\n}\n\n\n\n\n\n\n\nfunction createPromise(position, delay) {\nconst shouldResolve = Math.random() > 0.3;\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      \n      if (shouldResolve) {\n    res({position, delay})\n  } else {\n    rej({position, delay})\n  }\n    }, delay)\n    \n  \n  })\n   \n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$info","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","res","rej","setTimeout","addEventListener","ev","preventDefault","elements","delay1","step","amount","currentTarget","value","$parcel$interopDefault","Notify","failure","Number","console","log","reset","i","pos","current","then","success","catch"],"version":3,"file":"03-promises.9146ae0e.js.map"}